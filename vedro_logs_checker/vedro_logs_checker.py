import datetime
import logging

import docker
from vedro.core import Dispatcher, Plugin, PluginConfig
from vedro.events import ScenarioRunEvent

from config import Config

__all__ = ("VedroLogsChecker")


class VedroLogsCheckerPlugin(Plugin):
    def __init__(self, config: PluginConfig) -> None:
        super().__init__(config)
        self._start_time = None
        self._project_containers = []
        self._search_for = config.search_for
        self._ignore_prefixes = config.ignore_prefixes
        self._fail_when_found = config.fail_when_found
        self._client = docker.from_env()
        try:
            self._project_name = Config.Docker.PROJECT_NAME
        except AttributeError:
            logging.error("PROJECT_NAME –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Config.Docker")
            self._project_name = None

        logging.basicConfig(level=logging.WARNING)

    def subscribe(self, dispatcher: Dispatcher) -> None:
        dispatcher.listen(ScenarioRunEvent, self._on_scenario_run)

    def _get_containers(self):
        try:
            self._project_containers = self._client.containers.list(filters={"name": self._project_name})
            containers_names = []
            for container in self._project_containers:
                containers_names.append(container.name)
            logging.warning(f"–ù–∞–π–¥–µ–Ω—ã –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã: {containers_names}")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤: {e}")
            return

    def _convert_log_str(self, line: str) -> tuple[str, str]:
        # –†–∞–∑–¥–µ–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ª–æ–≥–∞
        parts = line.split(" ", 1)
        # –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –º–µ—Ç–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
        if len(parts) < 2:
            return

        timestamp_str, log_message = parts
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–π timestamp –¥–æ–∫–µ—Ä–∞ –≤ –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π
        try:
            # –ü–æ–¥—Ä–µ–∑–∞–µ–º –º–∏–ª–∏—Å–µ–∫—É–Ω–¥—ã –¥–æ 6 –∑–Ω–∞–∫–æ–≤
            if "." in timestamp_str:
                timestamp_str = timestamp_str.split(".")[0] + "." + timestamp_str.split(".")[1][:6]
            # –£–±–∏—Ä–∞–µ–º Z –≤ –∫–æ–Ω—Ü–µ
            timestamp_str = timestamp_str.replace("Z", "+00:00")
            log_time = datetime.datetime.fromisoformat(timestamp_str)

        except ValueError:
            # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ –Ω–æ—Ä–º timestamp —Ç–æ —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –ª–æ–≥ –Ω–æ–≤—ã–π
            log_time = self._start_time
            log_message = line

        return log_time, log_message

    def _search_error_logs(self) -> dict:
        found_errors = {}
        # –ü–µ—Ä–µ–≤–æ–¥–∏–º _start_time –≤ UNIX-–≤—Ä–µ–º—è
        start_time_unix = int(self._start_time.timestamp())

        for container in self._project_containers:
            try:
                logs = container.logs(since=start_time_unix, timestamps=True).decode("utf-8", errors="ignore")
                error_logs = []

                for line in logs.splitlines():
                    log_time, log_message = self._convert_log_str(line)
                    log_message_lower = log_message.lower()
                    search_for_lower = [level.lower() for level in self._search_for]
                    if log_time >= self._start_time and any(level in log_message_lower for level in search_for_lower):
                        error_logs.append(log_message)

                if error_logs:
                    found_errors[container.name] = error_logs

            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ {container.name}: {e}")
        return found_errors

    def _return_errors(self, found_errors: dict, event: ScenarioRunEvent):
        if found_errors:
            error_msg = "\n‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –≤ –ª–æ–≥–∞—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤:\n"
            for container_name, logs in found_errors.items():
                error_msg += f"\nüî¥ {container_name}:\n" + "\n".join(logs) + "\n"
            if self._fail_when_found:
                logging.error(error_msg)
                event.scenario_result.mark_failed()
            else:
                logging.error(error_msg)
        else:
            logging.warning("–û—à–∏–±–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞—Ö –ø—Ä–æ–µ–∫—Ç–∞.")

    def _check_logs(self, event: ScenarioRunEvent) -> None:
        if not self._start_time or not self._project_containers:
            return

        logging.warning(f"–ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ —Å {self._start_time}")
        found_errors = self._search_error_logs()
        self._return_errors(found_errors=found_errors, event=event)

    async def _on_scenario_run(self, event: ScenarioRunEvent) -> None:
        scenario_name = event.scenario_result.scenario.subject
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã —Å –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã–º–∏ –ø—Ä–µ—Ñ–∏–∫—Å–∞–º–∏ –≤ subject –∏ –Ω–∞–∑–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞
        if scenario_name.startswith(tuple(self._ignore_prefixes)):
            logging.warning(f"–¢–µ—Å—Ç {scenario_name} –∏–º–µ–µ—Ç –ø—Ä–µ—Ñ–∏–∫—Å –¥–ª—è –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—è. –õ–æ–≥–∏ –Ω–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º")
            return

        self._start_time = datetime.datetime.utcnow()
        logging.warning(f"–¢–µ—Å—Ç {scenario_name} –∑–∞–ø—É—Å—Ç–∏–ª—Å—è, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è {self._start_time}")

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞
        self._get_containers()
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏ –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–∞
        self._check_logs(event)


# –≠–∫—Å–ø–æ—Ä—Ç –ø–ª–∞–≥–∏–Ω–∞
class VedroLogsChecker(PluginConfig):
    plugin = VedroLogsCheckerPlugin
    search_for: list[str] = ["ERROR"]  # –ò—Å–∫–æ–º—ã–µ –ø–æ–¥—Å—Ç—Ä–æ–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    ignore_prefixes: list[str] = ["try to"]  # –ü—Ä–µ—Ñ–∏–∫—Å—ã screnario, –∫–æ—Ç–æ—Ä—ã–µ –∏–≥–Ω–æ—Ä–∏—Ä—É—é—Ç—Å—è
    fail_when_found: bool = True  # –î–æ–ª–∂–µ–Ω –ª–∏ —Ç–µ—Å—Ç –ø–∞–¥–∞—Ç—å –ø—Ä–∏ –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏–∏ –ø–æ–¥—Å—Ç—Ä–æ–∫ –≤ –ª–æ–≥–∞—Ö
